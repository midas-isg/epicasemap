# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()
GET     /visualizer                 controllers.Application.visualizer()
GET     /manage/vizs                controllers.Application.manageVizs()
GET     /manage/series              controllers.Application.manageSeries()

# User
GET     /login                      controllers.User.promptLogin()
POST    /login                      controllers.User.login()
GET     /register                   controllers.User.promptRegistration()
POST    /register                   controllers.User.register()
GET     /logout                     controllers.User.logout()
GET     /api/accounts               controllers.User.get()
GET     /api/accounts/my-permissions controllers.User.getMyPermissions()

# Test page
GET     /test/acceptance            controllers.Test.acceptance()

# Swagger API documentation
GET     /api                        controllers.Application.swagger
GET     /api.json                   controllers.ApiHelpController.getResources
GET     /api.json*path              controllers.ApiHelpController.getResource(path)


# API
GET     /api/series							controllers.ApiSeries.list()
POST    /api/series							controllers.ApiSeries.post()
GET     /api/series/:id						controllers.ApiSeries.read(id:Long)
PUT     /api/series/:id						controllers.ApiSeries.put(id:Long)
DELETE  /api/series/:id						controllers.ApiSeries.delete(id:Long)
GET     /api/series/:id/permissions			controllers.ApiSeries.getPermissions(id:Long)
POST    /api/series/:id/permissions			controllers.ApiSeries.postPermissions(id:Long, email:Long ?= 0)
DELETE  /api/series/permissions/:id			controllers.ApiSeries.deletePermission(id:Long)
PUT     /api/series/permissions/:id/mode	controllers.ApiSeries.putMode(id:Long, email:Long ?= 0)
# @Deprecated
GET     /api/series/:id/time-coordinate   controllers.ApiTimeCoordinateSeries.get(id:Long, startInclusive?=null, endExclusive?=null, limit:java.lang.Integer?=null, offset:Int?=0)
GET     /api/series/:id/data         controllers.ApiSeries.getData(id:Long, startInclusive?=null, endExclusive?=null, limit:java.lang.Integer?=null, offset:Int?=0)

PUT		/api/series/:id/data         controllers.ApiSeries.uploadData(id:Long)
PUT		/api/series/:id/data-url	 controllers.ApiSeries.updateDataViaUrl(id:Long, overWrite: Boolean ?= false)

GET     /api/series/:id/topology     controllers.ApiTopology.read(id:Long)
POST    /api/series/:id/topology     controllers.ApiTopology.postLinkToSeries(id:Long)

PUT		/api/series/:id/data-tycho		controllers.APITychoSeries.updateDataViaUrl(id:Long, overWrite: Boolean ?= false)
PUT		/api/series/:id/save-tycho		controllers.APITychoSeries.saveData(id:Long, overWrite: Boolean ?= false)
GET		/api/series/tycho/json			controllers.APITychoSeries.getTychoJSON(type)
POST	/api/locations/data-location	controllers.APITychoSeries.findLocation()

POST    /api/locations/bulk-lables  controllers.ApiLocation.getBulkLables()
GET     /api/locations/:id          controllers.ApiLocation.read(id:Long)

GET     /api/vizs						controllers.ApiViz.list()
POST    /api/vizs						controllers.ApiViz.post()
GET     /api/vizs/:id					controllers.ApiViz.read(id:Long)
PUT     /api/vizs/:id					controllers.ApiViz.put(id:Long)
DELETE  /api/vizs/:id					controllers.ApiViz.delete(id:Long)
PUT     /api/vizs/:id/ui-setting		controllers.ApiViz.putUiSetting(id:Long)
GET     /api/vizs/:id/ui-setting		controllers.ApiViz.readUiSetting(id:Long)
GET     /api/vizs/:id/permissions		controllers.ApiViz.getPermissions(id:Long)
POST    /api/vizs/:id/permissions		controllers.ApiViz.postPermissions(id:Long, email:Long ?= 0)
DELETE  /api/vizs/permissions/:id		controllers.ApiViz.deletePermission(id:Long)
PUT     /api/vizs/permissions/:id/mode	controllers.ApiViz.putMode(id:Long, email:Long ?= 0)
GET     /api/vizs/:vId/series/:sId/time-coordinate	controllers.ApiViz.getSeriesData(vId:Long, sId:Long, startInclusive?=null, endExclusive?=null, limit:java.lang.Integer?=null, offset:Int?=0)

GET		/api/get-json/$encodedURL<.*>			controllers.APIHelper.getJSONByEncodedURL(encodedURL)
POST    /api/vizs/:id/permissions/request		controllers.ApiViz.requestPermission(id:Long)
POST    /api/series/:id/permissions/request		controllers.ApiSeries.requestPermission(id:Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
